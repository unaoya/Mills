import Init.Data.Nat.Basic
import Mathlib.Algebra.Order.Ring.Lemmas
import Mathlib.Analysis.Calculus.MeanValue
import Mathlib.Analysis.SpecialFunctions.Pow.Real
import Mathlib.Analysis.SpecialFunctions.Pow.Continuity
import Mathlib.Analysis.SpecialFunctions.Pow.Deriv
import Mathlib.Analysis.SpecificLimits.Basic
import Mathlib.Data.Nat.Prime
import Mathlib.Data.Real.Irrational
import Mathlib.Analysis.SpecialFunctions.Pow.NNReal

import Mills.Defs
import Mills.thm3

open Filter Topology NNReal

lemma lim_add_n_inv_pow_k (a : ‚Ñù) (k : ‚Ñï) : Tendsto (fun n : ‚Ñï ‚Ü¶ (a + 1 / n) ^ k) atTop (ùìù (a ^ k)) := by
  set add_a_pow_k := (fun x : ‚Ñù ‚Ü¶ x ^ k) ‚àò (fun x : ‚Ñù ‚Ü¶ a + x) with add_a_pow_k_def
  have : (fun n : ‚Ñï ‚Ü¶ (a + 1 / n) ^ k) = add_a_pow_k ‚àò (fun n : ‚Ñï ‚Ü¶ (n : ‚Ñù)‚Åª¬π) := by sorry -- funext; rw [add_a_pow_k]; simp
  rw [this]
  have : Tendsto add_a_pow_k (ùìù 0) (ùìù (add_a_pow_k 0)) := Continuous.tendsto (Continuous.comp (continuous_pow k) (continuous_add_left a)) 0
  simp [add_a_pow_k] at this
  apply tendsto_nhds_iff_seq_tendsto.mp this
  exact tendsto_inverse_atTop_nhds_zero_nat

lemma tendsto_nbd (f : ‚Ñï ‚Üí ‚Ñù) (a M : ‚Ñù) (h : Tendsto f atTop (ùìù a)) (h' : a < M) : ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí f n < M := by
  rcases (tendsto_atTop_nhds.mp h {x | x < M} h' (isOpen_gt' M)) with ‚ü®N, hN‚ü©
  exact ‚ü®N, fun n hn ‚Ü¶ hN n hn‚ü©

lemma exist_n (a M : ‚Ñù) (k : ‚Ñï) (h : a ^ k < M) : ‚àÉ n : ‚Ñï, n > 0 ‚àß (a + 1 / n) ^ k < M := by
  let f := fun n : ‚Ñï ‚Ü¶ (a + 1 / n) ^ k
  rcases tendsto_nbd f (a ^ k) M (lim_add_n_inv_pow_k a k) h with ‚ü®n, hn‚ü©
  exact ‚ü®n + 1, ‚ü®by linarith, hn (n + 1) (by linarith)‚ü©‚ü©

theorem Mills_exists : Mills A := by
  have h (k : ‚Ñï+) : Nat.Prime (Mills_seq A k) := by
    let M := Nat.floor (Mills_seq A k) + 1
    have h‚ÇÄ : (Mills_seq A k) < M := by dsimp [M]; apply Nat.lt_succ_floor (Mills_seq A k)
    have h‚ÇÇ : A ^ 3 ^ k.val  < M := by
      dsimp [Mills_seq, pnpow] at h‚ÇÄ
      sorry
    rcases exist_n A M (3 ^ k.val) h‚ÇÇ with ‚ü®N, hN‚ÇÅ, hN‚ÇÇ‚ü©
    have h‚ÇÅ (n : ‚Ñï+) : ‚àÉ B ‚àà W, A ‚â§ B ‚àß B < A + 1 / n := by
      have : 1 / (n.val : ‚Ñù‚â•0) > 0 := by norm_num
      rcases Real.lt_sInf_add_pos W_real_nonempty this with ‚ü®B, hB‚ÇÅ, hB‚ÇÇ‚ü©
      sorry
--      exact ‚ü®B, ‚ü®hB‚ÇÅ, A_lb B hB‚ÇÅ, hB‚ÇÇ‚ü©‚ü©
    rcases h‚ÇÅ ‚ü®N, hN‚ÇÅ‚ü© with ‚ü®B, hB‚ÇÅ, _, hB‚ÇÇ‚ü© -- „ÇÄ„Å†Ôºü‰∏ä„Å®ÂêåÊßò
    have h‚ÇÑ : (Mills_seq A k) ‚â§ B ^ (3 ^ k.val) := by sorry -- linarith [floor_le A (3 ^ k) (by linarith [Mills_gt_one]), pow_le_left A B (3 ^ k) (by linarith [Mills_gt_one]) (A_lb B hB‚ÇÅ)]
    have h‚ÇÖ : B ^ (3 ^ k.val) < ‚ÜëM := by sorry -- linarith [pow_lt_left B (A + 1 / N) (3 ^ k) (by norm_num) hB‚ÇÅ.left hB‚ÇÇ]
    have h‚ÇÜ : Mills_seq A k = Nat.floor (B ^ (3 ^ k.val)) := by sorry
      -- apply floor_eq A B (3 ^ k) (by linarith [hB‚ÇÅ.left]) ‚ü®h‚ÇÑ, _‚ü©
      -- simp [M] at h‚ÇÖ
      -- exact h‚ÇÖ
    rw [h‚ÇÜ]
    sorry
--    exact hB‚ÇÅ.right k hk
  exact ‚ü®Mills_gt_one, h‚ü©
